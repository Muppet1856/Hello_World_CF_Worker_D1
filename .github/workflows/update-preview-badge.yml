name: Update README preview badge

on:
  workflow_dispatch:
    inputs:
      badge_label:
        description: 'Override the badge label (defaults to production or the sanitized branch/PR identifier).'
        required: false
  workflow_call:
    inputs:
      badge_label:
        description: 'Override the badge label (defaults to production or the sanitized branch/PR identifier).'
        required: false
        type: string

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Resolve worker URL and badge label
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          WORKER_NAME: ${{ vars.WORKER_NAME }}
          INPUT_BADGE_LABEL: ${{ inputs.badge_label }}
        run: |
          python3 - <<'PY'
import json
import os
import re
import sys
import urllib.error
import urllib.request

token = os.environ.get("CLOUDFLARE_API_TOKEN")
account_id = os.environ.get("CLOUDFLARE_ACCOUNT_ID")
worker_name = (os.environ.get("WORKER_NAME") or "").strip()

if not worker_name:
    sys.exit("WORKER_NAME repository variable is required to resolve the worker URL.")
if not token or not account_id:
    sys.exit("CLOUDFLARE_API_TOKEN and CLOUDFLARE_ACCOUNT_ID must be provided to resolve the worker URL.")


def sanitize(raw: str) -> str:
    cleaned = raw.strip().lower().replace("/", "-")
    cleaned = re.sub(r"[^a-z0-9-]", "-", cleaned)
    cleaned = re.sub(r"-+", "-", cleaned).strip("-")
    return cleaned or "preview"


def cf_get(path: str) -> dict:
    url = f"https://api.cloudflare.com/client/v4/{path}"
    req = urllib.request.Request(url)
    req.add_header("Authorization", f"Bearer {token}")
    req.add_header("Content-Type", "application/json")
    try:
        with urllib.request.urlopen(req) as resp:
            data = json.load(resp)
    except urllib.error.HTTPError as exc:
        detail = exc.read().decode("utf-8", "ignore")
        sys.exit(f"Cloudflare API call to {path} failed with status {exc.code}: {detail}")
    if not data.get("success", False):
        sys.exit(f"Cloudflare API call to {path} did not succeed: {data}")
    return data


event_name = os.environ.get("GITHUB_EVENT_NAME", "")
ref_name = os.environ.get("GITHUB_REF_NAME", "")
event_path = os.environ.get("GITHUB_EVENT_PATH", "")
deploy_env = ""

if event_name == "pull_request":
    if event_path and os.path.exists(event_path):
        with open(event_path, "r", encoding="utf-8") as fh:
            payload = json.load(fh)
        number = payload.get("number") or (payload.get("pull_request") or {}).get("number")
    else:
        number = None
    if not number:
        sys.exit("Unable to determine pull request number from event payload.")
    deploy_env = sanitize(f"pr-{number}")
elif ref_name and ref_name != "main":
    deploy_env = sanitize(ref_name)

domains = cf_get(f"accounts/{account_id}/workers/domains")
domain_host = ""
for entry in domains.get("result", []):
    host = (entry or {}).get("hostname")
    if host:
        domain_host = host.strip()
    if domain_host:
        break

if domain_host:
    if deploy_env:
        worker_host = f"{deploy_env}-{worker_name}.preview.{domain_host}"
    else:
        worker_host = domain_host
else:
    subdomain_data = cf_get(f"accounts/{account_id}/workers/subdomain")
    subdomain = (subdomain_data.get("result") or {}).get("subdomain", "").strip()
    if not subdomain:
        sys.exit("Could not resolve workers.dev subdomain from Cloudflare API.")
    if deploy_env:
        worker_host = f"{deploy_env}-{worker_name}.{subdomain}.workers.dev"
    else:
        worker_host = f"{worker_name}.{subdomain}.workers.dev"

badge_label_override = (os.environ.get("INPUT_BADGE_LABEL") or "").strip()
badge_label = badge_label_override or ("production" if not deploy_env else deploy_env)
preview_url = f"https://{worker_host}"

print(f"Resolved worker host: {worker_host}")
print(f"Using badge label: {badge_label}")

with open(os.environ["GITHUB_ENV"], "a", encoding="utf-8") as envfile:
    envfile.write(f"WORKER_HOST={worker_host}\n")
    envfile.write(f"PREVIEW_URL={preview_url}\n")
    envfile.write(f"BADGE_LABEL={badge_label}\n")
PY

      - name: Update preview badge in README
        run: |
          python3 - <<'PY'
import os
import urllib.parse

preview_url = (os.environ.get("PREVIEW_URL") or "").strip()
raw_badge_label = (os.environ.get("BADGE_LABEL") or "").strip()

if not preview_url:
    print("Preview URL is empty; skipping README update.")
    raise SystemExit(0)

badge_label = raw_badge_label.strip() or "production"
badge_label_for_badge = urllib.parse.quote(badge_label, safe="-_.~")
encoded_url = urllib.parse.quote(preview_url, safe="")
badge = f"[![Preview](https://img.shields.io/badge/preview-{badge_label_for_badge}-purple?link={encoded_url})]({preview_url}/)"

start = "<!-- PREVIEW_BADGE_START -->"
end = "<!-- PREVIEW_BADGE_END -->"
path = "README.md"

with open(path, "r", encoding="utf-8") as fh:
    contents = fh.read()

if start not in contents or end not in contents:
    raise SystemExit("README markers for preview badge are missing.")

before, remainder = contents.split(start, 1)
middle, after = remainder.split(end, 1)
middle = "\n" + badge + "\n"

updated = before + start + middle + end + after

with open(path, "w", encoding="utf-8") as fh:
    fh.write(updated)

with open(os.environ["GITHUB_ENV"], "a", encoding="utf-8") as envfile:
    envfile.write(f"BADGE_LABEL={badge_label}\n")
PY

      - name: Commit README update
        run: |
          if git diff --quiet README.md; then
            echo "README already reflects current badge."
            exit 0
          fi

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add README.md
          git commit -m "docs: update preview badge for ${BADGE_LABEL}"
          git push
