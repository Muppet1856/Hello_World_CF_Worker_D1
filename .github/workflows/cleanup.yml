on:
  pull_request:
    branches:
      - '*'  # Targets all branches for PRs to enable preview deployments.
    types: [closed]  # Captures PR creation and updates for deployment and cleanup.
jobs:
  cleanup-preview:
    # Job Configuration:
    # This job cleans up preview Workers and D1 databases when a PR is closed.
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        # Purpose: Clones the repository to access any necessary scripts or configuration.
        uses: actions/checkout@v4

      - name: Set up Node.js
        # Purpose: Sets up Node.js for running Wrangler commands during cleanup.
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        # Purpose: Installs Wrangler and jq for cleanup operations.
        run: |
          npm install wrangler@4 --save-dev
          sudo apt update && sudo apt install -y jq

      - name: Delete Preview Worker and D1 Database
        # Purpose: Lists Workers and D1 databases via Cloudflare API, deletes using Wrangler.
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}  # Gets the PR number.
          PREVIEW_NAME="pr-${PR_NUMBER}-${{ vars.WORKER_NAME }}"  # e.g., pr-24-<WORKER_NAME>.
          PREVIEW_DB_NAME="${PREVIEW_NAME}"  # Matches the database name to the Worker name.
      
          # Verifies Cloudflare authentication via API.
          if curl -s -X GET "https://api.cloudflare.com/client/v4/user" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json" | jq -e '.success' > /dev/null 2>&1; then
            echo "Cloudflare authentication successful"
      
            # Set up Wrangler configuration for deletions.
            export CLOUDFLARE_API_TOKEN="$CLOUDFLARE_API_TOKEN"
            export CLOUDFLARE_ACCOUNT_ID="$CLOUDFLARE_ACCOUNT_ID"
      
            # Checks for the preview Worker via API.
            WORKERS=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts" \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              -H "Content-Type: application/json")
            if echo "$WORKERS" | jq -e --arg name "$PREVIEW_NAME" '.result[] | select(.id == $name)' > /dev/null 2>&1; then
              echo "Deleting preview Worker: $PREVIEW_NAME"
              curl -s -X DELETE "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/$PREVIEW_NAME" \
                -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
                -H "Content-Type: application/json"
              if [ $? -eq 0 ]; then
                echo "Preview Worker $PREVIEW_NAME deleted"
              else
                echo "Failed to delete preview Worker $PREVIEW_NAME"
                exit 1
              fi
            else
              echo "Preview Worker $PREVIEW_NAME not found, skipping deletion"
            fi
      
            # Checks for the preview D1 database via API.
            D1_DBS=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/d1/database" \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              -H "Content-Type: application/json")
            if echo "$D1_DBS" | jq -e --arg name "$PREVIEW_DB_NAME" '.result[] | select(.name == $name)' > /dev/null 2>&1; then
              echo "Deleting preview D1 database: $PREVIEW_DB_NAME"
              npx wrangler d1 delete "$PREVIEW_DB_NAME"
              if [ $? -eq 0 ]; then
                echo "Preview D1 database $PREVIEW_DB_NAME deleted"
              else
                echo "Failed to delete preview D1 database $PREVIEW_DB_NAME"
                exit 1
              fi
            else
              echo "Preview D1 database $PREVIEW_DB_NAME not found, skipping deletion"
            fi
          else
            echo "Failed to authenticate with Cloudflare, skipping cleanup"
            exit 1
          fi
