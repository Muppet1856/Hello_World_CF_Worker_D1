name: Deploy to Cloudflare Worker with D1

on:
  push:
    branches: [ '**' ]
    paths-ignore: [ '**/.github/**', '**/README.md' ]
  pull_request:
    types: [ opened, synchronize ]
    paths-ignore: [ '**/.github/**', '**/README.md' ]
  create:
    branches: [ '**' ]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify src/index.js
        run: |
          [ -f "src/index.js" ] || (echo "Error: src/index.js missing" >&2; exit 1)

      - name: Set DEPLOY_TYPE
        id: deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sanitize() {
            echo "$1" | tr '[:upper:]' '[:lower:]' | tr '/' '-' | sed 's/[^a-z0-9-]/-/g' | sed 's/--*/-/g' | sed 's/^-//;s/-$//'
          }

          if [ "${{ github.event_name }}" == "pull_request" ]; then
            NAME=$(sanitize "pr-${{ github.event.pull_request.number }}")
            echo "type=pr" >> $GITHUB_OUTPUT
            echo "name=$NAME" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref_name }}" == "main" ]; then
            echo "type=prod" >> $GITHUB_OUTPUT
            echo "name=" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "push" ] || [ "${{ github.event_name }}" == "create" ]; then
            RESPONSE=$(curl -sH "Authorization: Bearer $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/pulls?head=${{ github.repository_owner }}:${{ github.ref_name }}&state=open")
            COUNT=$(echo "$RESPONSE" | jq '. | length')
            if [ "$COUNT" -gt 0 ]; then
              echo "type=skip" >> $GITHUB_OUTPUT
            else
              NAME=$(sanitize "${{ github.ref_name }}")
              echo "type=branch" >> $GITHUB_OUTPUT
              echo "name=$NAME" >> $GITHUB_OUTPUT
            fi
          else
            echo "type=skip" >> $GITHUB_OUTPUT
          fi

      # ————————————————————————
      # 1. PRODUCTION DEPLOY
      # ————————————————————————
      - name: Setup wrangler.toml (Production)
        if: steps.deploy.outputs.type == 'prod'
        env:
          WORKER_NAME: ${{ vars.WORKER_NAME }}
        run: |
          cat > wrangler.toml << EOF
          name = "$WORKER_NAME"
          main = "src/index.js"
          compatibility_date = "$(date +%Y-%m-%d)"
          EOF

          # CONDITIONAL ASSETS
          if [ -d "public" ]; then
            echo 'assets = { directory = "public" }' >> wrangler.toml
            echo "Assets directory 'public' found and configured"
          else
            echo "No 'public' directory found — skipping assets"
          fi

          # Set WORKER_URL
          SUBDOMAIN=$(curl -s -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/workers/subdomain" \
            | jq -r '.result.subdomain')
          echo "WORKER_URL=$WORKER_NAME.$SUBDOMAIN.workers.dev" >> $GITHUB_ENV

      # ————————————————————————
      # 2. PR PREVIEW DEPLOY
      # ————————————————————————
      - name: Setup wrangler.toml (PR)
        if: steps.deploy.outputs.type == 'pr'
        env:
          WORKER_NAME: ${{ vars.WORKER_NAME }}
        run: |
          FINAL_NAME="${{ steps.deploy.outputs.name }}-$WORKER_NAME"
          cat > wrangler.toml << EOF
          name = "$FINAL_NAME"
          main = "src/index.js"
          compatibility_date = "$(date +%Y-%m-%d)"
          EOF

          # CONDITIONAL ASSETS
          if [ -d "public" ]; then
            echo 'assets = { directory = "public" }' >> wrangler.toml
            echo "Assets directory 'public' found and configured"
          else
            echo "No 'public' directory found — skipping assets"
          fi

          # Set WORKER_URL
          SUBDOMAIN=$(curl -s -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/workers/subdomain" \
            | jq -r '.result.subdomain')
          echo "WORKER_URL=$FINAL_NAME.$SUBDOMAIN.workers.dev" >> $GITHUB_ENV

      # ————————————————————————
      # 3. BRANCH PREVIEW DEPLOY
      # ————————————————————————
      - name: Setup wrangler.toml (Branch)
        if: steps.deploy.outputs.type == 'branch'
        env:
          WORKER_NAME: ${{ vars.WORKER_NAME }}
        run: |
          FINAL_NAME="${{ steps.deploy.outputs.name }}-$WORKER_NAME"
          cat > wrangler.toml << EOF
          name = "$FINAL_NAME"
          main = "src/index.js"
          compatibility_date = "$(date +%Y-%m-%d)"
          EOF

          # CONDITIONAL ASSETS
          if [ -d "public" ]; then
            echo 'assets = { directory = "public" }' >> wrangler.toml
            echo "Assets directory 'public' found and configured"
          else
            echo "No 'public' directory found — skipping assets"
          fi

          # Set WORKER_URL
          SUBDOMAIN=$(curl -s -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/workers/subdomain" \
            | jq -r '.result.subdomain')
          echo "WORKER_URL=$FINAL_NAME.$SUBDOMAIN.workers.dev" >> $GITHUB_ENV

      # ————————————————————————
      # COMMON STEPS
      # ————————————————————————
      - name: Install dependencies
        if: steps.deploy.outputs.type != 'skip'
        run: |
          npm install wrangler@4 --save-dev
          sudo apt update -qq && sudo apt install -y jq -qq

      - name: Create/Get D1 + Bind
        if: steps.deploy.outputs.type != 'skip'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          USE_PRODUCTION_DB_ON_PREVIEW: ${{ vars.USE_PRODUCTION_DB_ON_PREVIEW }}
        run: |
          WORKER_NAME=${{ vars.WORKER_NAME }}
          DEPLOY_NAME="${{ steps.deploy.outputs.name }}"
          if [ -z "$DEPLOY_NAME" ] || [ "$USE_PRODUCTION_DB_ON_PREVIEW" = "true" ]; then
            DB_NAME="$WORKER_NAME"
          else
            DB_NAME="${DEPLOY_NAME}-${WORKER_NAME}"
          fi
          BINDING_NAME=${{ vars.BINDING_NAME }}

          npx wrangler whoami
          DBS=$(npx wrangler d1 list --json)
          DB_ID=$(echo "$DBS" | jq -r --arg name "$DB_NAME" '.[] | select(.name == $name) | .uuid')

          if [ -z "$DB_ID" ]; then
            echo "Creating D1: $DB_NAME"
            npx wrangler d1 create "$DB_NAME" || exit 1
            DBS=$(npx wrangler d1 list --json)
            DB_ID=$(echo "$DBS" | jq -r --arg name "$DB_NAME" '.[] | select(.name == $name) | .uuid')
          fi

          if ! grep -q "database_id = \"$DB_ID\"" wrangler.toml; then
            echo -e "\n[[d1_databases]]\nbinding = \"$BINDING_NAME\"\ndatabase_name = \"$DB_NAME\"\ndatabase_id = \"$DB_ID\"" >> wrangler.toml
          fi

          echo "DB_NAME=$DB_NAME" >> $GITHUB_ENV
          echo "DB_ID=$DB_ID" >> $GITHUB_ENV

      - name: Apply Migrations
        if: steps.deploy.outputs.type != 'skip'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          for file in migrations/*.sql; do
            [ -f "$file" ] || continue
            npx wrangler d1 execute "${{ env.DB_NAME }}" --file="$file" --remote || exit 1
          done

      - name: Deploy Worker
        if: steps.deploy.outputs.type != 'skip'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Comment PR
        if: steps.deploy.outputs.type == 'pr'
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Preview: https://${{ env.WORKER_URL }}`
            });