name: Deploy to Cloudflare Worker with D1

on:
  push:
    branches: [ '**' ]
    paths-ignore: [ '**/.github/**', '**/README.md' ]
  pull_request:
    types: [ opened, synchronize ]
    paths-ignore: [ '**/.github/**', '**/README.md' ]
  create:
    branches: [ '**' ]

concurrency:
  group: deploy-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for git rev-list to detect first commit

      - name: Verify src/index.js
        run: |
          [ -f "src/index.js" ] || (echo "Error: src/index.js missing" >&2; exit 1)

      - name: Set DEPLOY_TYPE
        id: deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sanitize() {
            echo "$1" | tr '[:upper:]' '[:lower:]' | tr '/' '-' | sed 's/[^a-z0-9-]/-/g' | sed 's/--*/-/g' | sed 's/^-//;s/-$//'
          }

          BRANCH_REF="${{ github.ref }}"
          BRANCH_NAME=$(echo "$BRANCH_REF" | sed 's|^refs/heads/||')

          echo "Event: ${{ github.event_name }}"
          echo "Ref: $BRANCH_REF | Branch: $BRANCH_NAME"

          if [ "${{ github.event_name }}" == "pull_request" ]; then
            NAME=$(sanitize "pr-${{ github.event.pull_request.number }}")
            echo "type=pr" >> $GITHUB_OUTPUT
            echo "name=$NAME" >> $GITHUB_OUTPUT
            echo "PR preview deploy"

          elif [ "${{ github.event_name }}" == "push" ] && [ "$BRANCH_NAME" == "main" ]; then
            echo "type=prod" >> $GITHUB_OUTPUT
            echo "name=" >> $GITHUB_OUTPUT
            echo "Production deploy"

          elif [ "${{ github.event_name }}" == "create" ]; then
            NAME=$(sanitize "$BRANCH_NAME")
            echo "type=branch" >> $GITHUB_OUTPUT
            echo "name=$NAME" >> $GITHUB_OUTPUT
            echo "Branch created → deploying preview"

          elif [ "${{ github.event_name }}" == "push" ]; then
            # Skip if this is the first commit on a new branch (create already ran)
            if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
              echo "type=skip" >> $GITHUB_OUTPUT
              echo "Skip: First push after branch creation"
            else
              # Check for open PR
              RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                "https://api.github.com/repos/${{ github.repository }}/pulls?head=${{ github.repository_owner }}:${BRANCH_NAME}&state=open")
              COUNT=$(echo "$RESPONSE" | jq '. | length // 0')
              if [ "$COUNT" -gt 0 ]; then
                echo "type=skip" >> $GITHUB_OUTPUT
                echo "Skip: Open PR exists for $BRANCH_NAME"
              else
                NAME=$(sanitize "$BRANCH_NAME")
                echo "type=branch" >> $GITHUB_OUTPUT
                echo "name=$NAME" >> $GITHUB_OUTPUT
                echo "Branch push → deploying preview"
              fi
            fi

          else
            echo "type=skip" >> $GITHUB_OUTPUT
          fi

      # ————————————————————————
      # 1. PRODUCTION DEPLOY
      # ————————————————————————
      - name: Setup wrangler.toml (Production)
        if: steps.deploy.outputs.type == 'prod'
        env:
          WORKER_NAME: ${{ vars.WORKER_NAME }}
        run: |
          COMPAT_DATE=$(date +%Y-%m-%d)
          cat > wrangler.toml << EOF
          name = "${WORKER_NAME}"
          main = "src/index.js"
          compatibility_date = "${COMPAT_DATE}"
          EOF

          if [ -d "public" ]; then
            printf 'assets = { directory = "public" }\n' >> wrangler.toml
            echo "Assets: public/ found"
          else
            echo "Assets: no public/ directory"
          fi

          SUBDOMAIN=$(curl -s -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/workers/subdomain" \
            | jq -r '.result.subdomain // empty')

          [ -n "$SUBDOMAIN" ] || { echo "Error: No subdomain" >&2; exit 1; }
          echo "WORKER_URL=${WORKER_NAME}.${SUBDOMAIN}.workers.dev" >> $GITHUB_ENV

      # ————————————————————————
      # 2. PR PREVIEW DEPLOY
      # ————————————————————————
      - name: Setup wrangler.toml (PR)
        if: steps.deploy.outputs.type == 'pr'
        env:
          WORKER_NAME: ${{ vars.WORKER_NAME }}
        run: |
          FINAL_NAME="${{ steps.deploy.outputs.name }}-${WORKER_NAME}"
          COMPAT_DATE=$(date +%Y-%m-%d)
          cat > wrangler.toml << EOF
          name = "${FINAL_NAME}"
          main = "src/index.js"
          compatibility_date = "${COMPAT_DATE}"
          EOF

          if [ -d "public" ]; then
            printf 'assets = { directory = "public" }\n' >> wrangler.toml
            echo "Assets: public/ found"
          else
            echo "Assets: no public/ directory"
          fi

          SUBDOMAIN=$(curl -s -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/workers/subdomain" \
            | jq -r '.result.subdomain // empty')

          [ -n "$SUBDOMAIN" ] || { echo "Error: No subdomain" >&2; exit 1; }
          echo "WORKER_URL=${FINAL_NAME}.${SUBDOMAIN}.workers.dev" >> $GITHUB_ENV

      # ————————————————————————
      # 3. BRANCH PREVIEW DEPLOY
      # ————————————————————————
      - name: Setup wrangler.toml (Branch)
        if: steps.deploy.outputs.type == 'branch'
        env:
          WORKER_NAME: ${{ vars.WORKER_NAME }}
        run: |
          FINAL_NAME="${{ steps.deploy.outputs.name }}-${WORKER_NAME}"
          COMPAT_DATE=$(date +%Y-%m-%d)
          cat > wrangler.toml << EOF
          name = "${FINAL_NAME}"
          main = "src/index.js"
          compatibility_date = "${COMPAT_DATE}"
          EOF

          if [ -d "public" ]; then
            printf 'assets = { directory = "public" }\n' >> wrangler.toml
            echo "Assets: public/ found"
          else
            echo "Assets: no public/ directory"
          fi

          SUBDOMAIN=$(curl -s -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/workers/subdomain" \
            | jq -r '.result.subdomain // empty')

          [ -n "$SUBDOMAIN" ] || { echo "Error: No subdomain" >&2; exit 1; }
          echo "WORKER_URL=${FINAL_NAME}.${SUBDOMAIN}.workers.dev" >> $GITHUB_ENV

      # ————————————————————————
      # COMMON STEPS
      # ————————————————————————
      - name: Install dependencies
        if: steps.deploy.outputs.type != 'skip'
        run: |
          npm install wrangler@4 --save-dev
          sudo apt update -qq && sudo apt install -y jq -qq

      - name: Create/Get D1 + Bind
        if: steps.deploy.outputs.type != 'skip'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          USE_PRODUCTION_DB_ON_PREVIEW: ${{ vars.USE_PRODUCTION_DB_ON_PREVIEW }}
        run: |
          WORKER_NAME="${{ vars.WORKER_NAME }}"
          DEPLOY_NAME="${{ steps.deploy.outputs.name }}"
          DB_NAME=$(if [ -z "$DEPLOY_NAME" ] || [ "$USE_PRODUCTION_DB_ON_PREVIEW" = "true" ]; then
            echo "$WORKER_NAME"
          else
            echo "${DEPLOY_NAME}-${WORKER_NAME}"
          fi)
          BINDING_NAME="${{ vars.BINDING_NAME }}"

          echo "Using DB: $DB_NAME"

          npx wrangler whoami
          DBS=$(npx wrangler d1 list --json)
          DB_ID=$(echo "$DBS" | jq -r --arg name "$DB_NAME" '.[] | select(.name == $name) | .uuid // empty')

          if [ -z "$DB_ID" ]; then
            echo "Creating D1: $DB_NAME"
            npx wrangler d1 create "$DB_NAME" || exit 1
            DB_ID=$(npx wrangler d1 list --json | jq -r --arg name "$DB_NAME" '.[] | select(.name == $name) | .uuid')
          else
            echo "Using existing D1: $DB_NAME"
          fi

          if ! grep -q "database_id = \"$DB_ID\"" wrangler.toml 2>/dev/null; then
            printf '\n[[d1_databases]]\n' >> wrangler.toml
            printf 'binding = "%s"\n' "$BINDING_NAME" >> wrangler.toml
            printf 'database_name = "%s"\n' "$DB_NAME" >> wrangler.toml
            printf 'database_id = "%s"\n' "$DB_ID" >> wrangler.toml
            echo "D1 binding added"
          else
            echo "D1 binding already exists"
          fi

          echo "DB_NAME=$DB_NAME" >> $GITHUB_ENV
          echo "DB_ID=$DB_ID" >> $GITHUB_ENV

      - name: Apply Migrations
        if: steps.deploy.outputs.type != 'skip'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          shopt -s nullglob
          for file in migrations/*.sql; do
            echo "Applying: $file"
            npx wrangler d1 execute "${{ env.DB_NAME }}" --file="$file" --remote || exit 1
          done
          echo "Migrations complete"

      - name: Deploy Worker
        if: steps.deploy.outputs.type != 'skip'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Comment PR
        if: steps.deploy.outputs.type == 'pr'
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: ${{ github.event.pull_request.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Preview: https://${{ env.WORKER_URL }}`
            });