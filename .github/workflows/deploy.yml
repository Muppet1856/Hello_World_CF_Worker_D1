name: Deploy to Cloudflare Worker with D1

on:
  push:
    branches:
      - main  # Or your default branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'  # Or your project's Node version

      - name: Install dependencies
        run: |
          npm install wrangler@4 --save-dev
          sudo apt update && sudo apt install -y jq  # For JSON parsing

      - name: Create or get D1 database and bind
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # Set database name (change as needed)
          DB_NAME="hello-world"
          BINDING_NAME="HELLO_WORLD_DB"  # The env variable name in your Worker code (e.g., env.DB)

          # Authenticate Wrangler (uses CF_API_TOKEN env var automatically)
          npx wrangler whoami

          # List existing D1 databases
          DBS=$(npx wrangler d1 list --json)

          # Check if DB exists and get ID
          DB_ID=$(echo "$DBS" | jq -r --arg name "$DB_NAME" '
            first(
              .. | objects
              | select(.name? == $name)
              | (.uuid // .id // .database_id // empty)
            )
          ')

          if [ -z "$DB_ID" ] || [ "$DB_ID" = "null" ]; then
            # Create if not exists
            echo "Creating new D1 database \"$DB_NAME\""
            npx wrangler d1 create $DB_NAME
            DBS=$(npx wrangler d1 list --json)
            DB_ID=$(echo "$DBS" | jq -r --arg name "$DB_NAME" '
              first(
                .. | objects
                | select(.name? == $name)
                | (.uuid // .id // .database_id // empty)
              )
            ')

            if [ -z "$DB_ID" ] || [ "$DB_ID" = "null" ]; then
              echo "Failed to determine database ID for \"$DB_NAME\" after creation" >&2
              exit 1
            fi

            echo "Created new D1 database with ID: $DB_ID"
          else
            echo "Using existing D1 database with ID: $DB_ID"
          fi

          # Check if binding already exists in wrangler.toml to avoid duplicates
          if [ -z "$DB_ID" ] || [ "$DB_ID" = "null" ]; then
            echo "Unable to determine a valid database ID for \"$DB_NAME\"." >&2
            exit 1
          fi

          if ! grep -q "database_id = \"$DB_ID\"" wrangler.toml; then
            # Append D1 binding to wrangler.toml
            echo "" >> wrangler.toml  # Newline for safety
            echo "[[d1_databases]]" >> wrangler.toml
            echo "binding = \"$BINDING_NAME\"" >> wrangler.toml
            echo "database_name = \"$DB_NAME\"" >> wrangler.toml
            echo "database_id = \"$DB_ID\"" >> wrangler.toml
            echo "D1 binding added/updated in wrangler.toml"
          else
            echo "D1 binding already present in wrangler.toml"
          fi

          # Expose database information to subsequent workflow steps
          {
            echo "DB_NAME=$DB_NAME"
            echo "DB_ID=$DB_ID"
          } >> "$GITHUB_ENV"

      - name: Apply schema migrations
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          if [ -z "${DB_NAME:-}" ]; then
            echo "DB_NAME is not set. Ensure the database step populated GITHUB_ENV." >&2
            exit 1
          fi
          npx wrangler d1 execute "$DB_NAME" --file=./migrations/0001_create_greetings.sql  # Runs remotely by default
          echo "Creation of tables executed." >&2

      - name: Deploy Worker
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
