name: Deploy to Cloudflare Worker with D1

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - closed

concurrency:
  group: deploy-${{ github.event_name == 'pull_request' && github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  preview:
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: '20'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          npm install --no-save wrangler@4
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Create or get preview D1 database and bind
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          BASE_DB_NAME: ${{ vars.DB_NAME }}
          PREVIEW_DB_PREFIX: ${{ vars.PREVIEW_DB_PREFIX }}
          BINDING_NAME: ${{ vars.BINDING_NAME }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          set -euo pipefail

          if [ -z "${BASE_DB_NAME:-}" ]; then
            echo "Error: DB_NAME is not set. Please define it in GitHub repository variables." >&2
            exit 1
          fi
          if [ -z "${BINDING_NAME:-}" ]; then
            echo "Error: BINDING_NAME is not set. Please define it in GitHub repository variables." >&2
            exit 1
          fi
          if [ -z "${PREVIEW_DB_PREFIX:-}" ]; then
            echo "Error: PREVIEW_DB_PREFIX is not set. Please define it in GitHub repository variables." >&2
            exit 1
          fi
          if [ -z "${PR_NUMBER:-}" ]; then
            echo "Error: Could not determine pull request number for preview database naming." >&2
            exit 1
          fi

          DB_NAME="${PREVIEW_DB_PREFIX}${PR_NUMBER}_${BASE_DB_NAME}"
          D1_BLOCK_HEADER="[[env.preview.d1_databases]]"

          npx wrangler whoami
          DBS=$(npx wrangler d1 list --json)
          DB_ID=$(echo "$DBS" | jq -r --arg name "$DB_NAME" '.[] | select(.name == $name) | .uuid')

          if [ -z "$DB_ID" ]; then
            echo "Creating new D1 database \"$DB_NAME\""
            npx wrangler d1 create "$DB_NAME"
            DBS=$(npx wrangler d1 list --json)
            DB_ID=$(echo "$DBS" | jq -r --arg name "$DB_NAME" '.[] | select(.name == $name) | .uuid')
            if [ -z "$DB_ID" ]; then
              echo "Failed to determine database ID for \"$DB_NAME\" after creation" >&2
              exit 1
            fi
            echo "Created new D1 database with ID: $DB_ID"
          else
            echo "Using existing D1 database with ID: $DB_ID"
          fi

          if ! grep -q "database_id = \"$DB_ID\"" wrangler.toml; then
            cat <<EOF | tee -a wrangler.toml > /dev/null

$D1_BLOCK_HEADER
binding = "$BINDING_NAME"
database_name = "$DB_NAME"
database_id = "$DB_ID"
EOF
            echo "D1 binding added/updated in wrangler.toml"
          else
            echo "D1 binding already present in wrangler.toml"
          fi

          {
            echo "DB_NAME=$DB_NAME"
            echo "DB_ID=$DB_ID"
          } >> "$GITHUB_ENV"

      - name: Apply preview D1 migrations
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          set -euo pipefail
          for file in migrations/*.sql; do
            if [ -f "$file" ]; then
              echo "Applying migration: $file"
              if ! npx wrangler d1 execute "$DB_NAME" --file="$file" --remote; then
                echo "Failed to apply migration: $file" >&2
                exit 1
              fi
            else
              echo "No migration files found in migrations/ folder"
            fi
          done

          echo "Verifying table creation"
          TABLES=$(npx wrangler d1 execute "$DB_NAME" --command="SELECT name FROM sqlite_master WHERE type='table' AND name='greetings'" --json --remote)
          if echo "$TABLES" | grep -q '"name": "greetings"'; then
            echo "Table 'greetings' confirmed in database"
          else
            echo "Table 'greetings' not found in database" >&2
            exit 1
          fi

      - name: Deploy Worker (preview)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env preview --config wrangler.toml

      - name: Run smoke tests against preview deployment
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          set -euo pipefail
          DEPLOYMENTS_JSON=$(npx wrangler deployments list --env preview --config wrangler.toml --json)
          PREVIEW_URL=$(printf '%s' "$DEPLOYMENTS_JSON" | node <<'NODE'
            const chunks = [];
            process.stdin.setEncoding('utf8');
            process.stdin.resume();
            process.stdin.on('data', (chunk) => chunks.push(chunk));
            process.stdin.on('end', () => {
              const input = chunks.join('');
              if (!input) {
                console.error('No deployment data received from Wrangler.');
                process.exit(1);
              }
              const data = JSON.parse(input);
              const visited = new Set();
              function findUrl(value) {
                if (!value || visited.has(value)) {
                  return null;
                }
                if (typeof value === "string" && value.startsWith("https://")) {
                  return value;
                }
                if (Array.isArray(value)) {
                  for (const item of value) {
                    const result = findUrl(item);
                    if (result) {
                      return result;
                    }
                  }
                  return null;
                }
                if (typeof value === "object") {
                  visited.add(value);
                  const keys = Object.keys(value);
                  for (const key of keys) {
                    const result = findUrl(value[key]);
                    if (result) {
                      return result;
                    }
                  }
                }
                return null;
              }
              const url = findUrl(data);
              if (!url) {
                console.error('Unable to locate a preview URL in deployments response.');
                process.exit(1);
              }
              console.log(url);
            });
          NODE
          )

          echo "Preview URL: $PREVIEW_URL"
          curl --fail --silent --show-error "$PREVIEW_URL" --output preview-response.html
          if ! grep -qi "<!DOCTYPE html" preview-response.html; then
            echo "Preview response did not contain expected HTML." >&2
            cat preview-response.html >&2
            exit 1
          fi
          rm preview-response.html

  production:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: '20'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          npm install --no-save wrangler@4
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Create or get production D1 database and bind
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          BASE_DB_NAME: ${{ vars.DB_NAME }}
          BINDING_NAME: ${{ vars.BINDING_NAME }}
        run: |
          set -euo pipefail

          if [ -z "${BASE_DB_NAME:-}" ]; then
            echo "Error: DB_NAME is not set. Please define it in GitHub repository variables." >&2
            exit 1
          fi
          if [ -z "${BINDING_NAME:-}" ]; then
            echo "Error: BINDING_NAME is not set. Please define it in GitHub repository variables." >&2
            exit 1
          fi

          DB_NAME="$BASE_DB_NAME"
          D1_BLOCK_HEADER="[[d1_databases]]"

          npx wrangler whoami
          DBS=$(npx wrangler d1 list --json)
          DB_ID=$(echo "$DBS" | jq -r --arg name "$DB_NAME" '.[] | select(.name == $name) | .uuid')

          if [ -z "$DB_ID" ]; then
            echo "Creating new D1 database \"$DB_NAME\""
            npx wrangler d1 create "$DB_NAME"
            DBS=$(npx wrangler d1 list --json)
            DB_ID=$(echo "$DBS" | jq -r --arg name "$DB_NAME" '.[] | select(.name == $name) | .uuid')
            if [ -z "$DB_ID" ]; then
              echo "Failed to determine database ID for \"$DB_NAME\" after creation" >&2
              exit 1
            fi
            echo "Created new D1 database with ID: $DB_ID"
          else
            echo "Using existing D1 database with ID: $DB_ID"
          fi

          if ! grep -q "database_id = \"$DB_ID\"" wrangler.toml; then
            cat <<EOF | tee -a wrangler.toml > /dev/null

$D1_BLOCK_HEADER
binding = "$BINDING_NAME"
database_name = "$DB_NAME"
database_id = "$DB_ID"
EOF
            echo "D1 binding added/updated in wrangler.toml"
          else
            echo "D1 binding already present in wrangler.toml"
          fi

          {
            echo "DB_NAME=$DB_NAME"
            echo "DB_ID=$DB_ID"
          } >> "$GITHUB_ENV"

      - name: Apply production D1 migrations
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          set -euo pipefail
          for file in migrations/*.sql; do
            if [ -f "$file" ]; then
              echo "Applying migration: $file"
              if ! npx wrangler d1 execute "$DB_NAME" --file="$file" --remote; then
                echo "Failed to apply migration: $file" >&2
                exit 1
              fi
            else
              echo "No migration files found in migrations/ folder"
            fi
          done

          echo "Verifying table creation"
          TABLES=$(npx wrangler d1 execute "$DB_NAME" --command="SELECT name FROM sqlite_master WHERE type='table' AND name='greetings'" --json --remote)
          if echo "$TABLES" | grep -q '"name": "greetings"'; then
            echo "Table 'greetings' confirmed in database"
          else
            echo "Table 'greetings' not found in database" >&2
            exit 1
          fi

      - name: Deploy Worker (production)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --config wrangler.toml

  cleanup:
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: '20'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          npm install --no-save wrangler@4
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Tear down merged preview environment
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          BASE_DB_NAME: ${{ vars.DB_NAME }}
          PREVIEW_DB_PREFIX: ${{ vars.PREVIEW_DB_PREFIX }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          set -euo pipefail

          if [ -z "${BASE_DB_NAME:-}" ]; then
            echo "Error: DB_NAME is not set. Please define it in GitHub repository variables." >&2
            exit 1
          fi
          if [ -z "${PREVIEW_DB_PREFIX:-}" ]; then
            echo "Error: PREVIEW_DB_PREFIX is not set. Please define it in GitHub repository variables." >&2
            exit 1
          fi
          if [ -z "${PR_NUMBER:-}" ]; then
            echo "Error: Could not determine pull request number for preview database naming." >&2
            exit 1
          fi

          PREVIEW_DB_NAME="${PREVIEW_DB_PREFIX}${PR_NUMBER}_${BASE_DB_NAME}"

          echo "Removing preview Worker deployment"
          if npx wrangler delete --env preview --config wrangler.toml --force; then
            echo "Preview Worker deleted"
          else
            echo "Preview Worker deletion command failed (it may not exist). Continuing." >&2
          fi

          echo "Looking for preview database: $PREVIEW_DB_NAME"
          DBS=$(npx wrangler d1 list --json)
          PREVIEW_DB_ID=$(echo "$DBS" | jq -r --arg name "$PREVIEW_DB_NAME" '.[] | select(.name == $name) | .uuid')

          if [ -n "$PREVIEW_DB_ID" ]; then
            echo "Deleting preview database $PREVIEW_DB_NAME (ID: $PREVIEW_DB_ID)"
            if npx wrangler d1 delete "$PREVIEW_DB_NAME" -y; then
              echo "Preview database deleted"
            else
              echo "Failed to delete preview database $PREVIEW_DB_NAME" >&2
              exit 1
            fi
          else
            echo "Preview database $PREVIEW_DB_NAME not found; nothing to delete"
          fi
